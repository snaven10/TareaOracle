package netgloo.controllers;

import netgloo.models.User;
import netgloo.models.UserDao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Una clase para probar las interacciones con la base de datos MySQL usando la clase UserDao.
 *
 * @author snaven10
 */
@Controller
public class UserController {

  // ------------------------
  // MÉTODOS PÚBLICOS
  // ------------------------
  
	@RequestMapping(value="/listar", method=RequestMethod.GET)
	public String listar(Model model) {
		model.addAttribute("titulo", "listado de cliente");
		model.addAttribute("usuarios", userDao.findAll());
		return "listar";
	}
		
  /**
   * /create  --> Crea un nuevo usuario y guárdalo en la base de datos.
   * 
   * @param email:correo electrónico del usuario
   * @param name:nombre Nombre del usuario
   * @return Una cadena que describe si el usuario se creó correctamente o no.
   */
  @RequestMapping("/create")
  @ResponseBody
  public String create(String email, String name) {
    User user = null;
    try {
      user = new User(email, name);
      userDao.save(user);
    }
    catch (Exception ex) {
      return "Error creating the user: " + ex.toString();
    }
    return "User succesfully created! (id = " + user.getId() + ")";
  }
  
  /**
   * /delete  --> Eliminar el usuario que tiene el id aprobado.
   * 
   * @param id La identificación del usuario para eliminar
   * @return Una cadena que describe si el usuario se borró exitosamente o no.
   */
  @RequestMapping("/delete")
  @ResponseBody
  public String delete(long id) {
    try {
      User user = new User(id);
      userDao.delete(user);
    }
    catch (Exception ex) {
      return "Error deleting the user: " + ex.toString();
    }
    return "User successfully deleted!";
  }
  
  /**
   * /get-by-email  --> Devuelve la identificación del usuario que tiene el correo electrónico pasado.
   * 
   * @param email El correo electrónico para buscar en la base de datos.
   * @return La identificación del usuario o un mensaje de error si el usuario no se encuentra.
   */
  @RequestMapping("/get-by-email")
  @ResponseBody
  public String getByEmail(String email) {
    String userId;
    try {
      User user = userDao.findByEmail(email);
      userId = String.valueOf(user.getId());
    }
    catch (Exception ex) {
      return "User not found";
    }
    return "The user id is: " + userId;
  }
  
  /**
   * /update  --> Actualice el correo electrónico y el nombre del usuario en la base de datos
   * que tiene la identificación aprobada.
   * 
   * @param id La id para que el usuario actualice.
   * @param email El nuevo correo electrónico
   * @param name El nuevo nombre.
   * @return Una cadena que describe si el usuario se actualizó correctamente o no.
   */
  @RequestMapping("/update")
  @ResponseBody
  public String updateUser(long id, String email, String name) {
    try {
      User user = userDao.findOne(id);
      user.setEmail(email);
      user.setName(name);
      userDao.save(user);
    }
    catch (Exception ex) {
      return "Error updating the user: " + ex.toString();
    }
    return "User successfully updated!";
  }

  // ------------------------
  // CAMPOS PRIVADOS
  // ------------------------

  @Autowired
  private UserDao userDao;
  
} // class UserController
